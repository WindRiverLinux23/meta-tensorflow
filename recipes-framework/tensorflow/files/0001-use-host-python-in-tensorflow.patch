From 5dc2717f85c218b50d06cacad203a77982d18fbf Mon Sep 17 00:00:00 2001
From: Hongxu Jia <hongxu.jia@windriver.com>
Date: Tue, 19 Sep 2023 14:13:09 +0800
Subject: [PATCH] use host python in tensorflow

It reverts commit [e85860e8382 use hermetic Python in Tensorflow. See
ci/official/requirements_updater/README.md for details.] to use host
python in tensorflow

Edit tensorflow/tools/pip_package/build_pip_package.sh to remove
hermetic pypi and use host python to instead

The patch was caused by running following steps:

  cp third_party/py/non_hermetic/* third_party/py/ -rf

  for f in `grep "@pypi" -rn tensorflow/ third_party/ -l`; do
    sed -i "/.*@pypi.*/d" $f
  done

Upstream-Status: Inappropriate [OE specific]

Signed-off-by: Hongxu Jia <hongxu.jia@windriver.com>
---
 WORKSPACE                                     |  46 ----
 tensorflow/BUILD                              |   2 -
 tensorflow/compiler/tf2tensorrt/BUILD         |   1 +
 tensorflow/dtensor/python/tests/BUILD         |   1 -
 tensorflow/lite/python/BUILD                  |   1 -
 tensorflow/python/BUILD                       |   1 -
 tensorflow/python/compiler/tensorrt/BUILD     |   1 -
 .../experimental/kernel_tests/service/BUILD   |   1 -
 tensorflow/python/debug/lib/BUILD             |   1 -
 .../python/distribute/experimental/rpc/BUILD  |   1 -
 .../python/distribute/failure_handling/BUILD  |   1 -
 tensorflow/python/eager/BUILD                 |   1 -
 tensorflow/python/estimator/BUILD             |  10 +-
 tensorflow/python/framework/BUILD             |   2 -
 tensorflow/python/keras/BUILD                 |   1 -
 tensorflow/python/keras/engine/BUILD          |   1 -
 tensorflow/python/keras/saving/BUILD          |   1 -
 tensorflow/python/profiler/BUILD              |   1 -
 .../python/profiler/integration_test/BUILD    |   1 -
 tensorflow/python/summary/BUILD               |   1 -
 .../tools/pip_package/build_pip_package.sh    |  29 +--
 third_party/py/BUILD.tpl                      |  39 ++-
 third_party/py/README                         |   3 +
 third_party/py/numpy/BUILD                    |   7 +-
 .../tensorflow.experimental.numpy.pbtxt       |   2 +-
 third_party/py/python_configure.bzl           | 235 +++++++++++++++++-
 26 files changed, 284 insertions(+), 107 deletions(-)
 create mode 100644 third_party/py/README

diff --git a/WORKSPACE b/WORKSPACE
index fb3af8a2bea..695700580b9 100644
--- a/WORKSPACE
+++ b/WORKSPACE
@@ -19,52 +19,6 @@ http_archive(
     url = "https://github.com/bazelbuild/rules_python/releases/download/0.23.1/rules_python-0.23.1.tar.gz",
 )
 
-load("@rules_python//python:repositories.bzl", "python_register_toolchains")
-load(
-    "//tensorflow/tools/toolchains/python:python_repo.bzl",
-    "python_repository",
-)
-
-python_repository(name = "python_version_repo")
-
-load("@python_version_repo//:py_version.bzl", "HERMETIC_PYTHON_VERSION")
-
-python_register_toolchains(
-    name = "python",
-    ignore_root_user_error = True,
-    python_version = HERMETIC_PYTHON_VERSION,
-)
-
-load("@python//:defs.bzl", "interpreter")
-load("@rules_python//python:pip.bzl", "package_annotation", "pip_parse")
-
-NUMPY_ANNOTATIONS = {
-    "numpy": package_annotation(
-        additive_build_content = """\
-filegroup(
-    name = "includes",
-    srcs = glob(["site-packages/numpy/core/include/**/*.h"]),
-)
-cc_library(
-    name = "numpy_headers",
-    hdrs = [":includes"],
-    strip_include_prefix="site-packages/numpy/core/include/",
-)
-""",
-    ),
-}
-
-pip_parse(
-    name = "pypi",
-    annotations = NUMPY_ANNOTATIONS,
-    python_interpreter_target = interpreter,
-    requirements = "//:requirements_lock_" + HERMETIC_PYTHON_VERSION.replace(".", "_") + ".txt",
-)
-
-load("@pypi//:requirements.bzl", "install_deps")
-
-install_deps()
-
 # Initialize the TensorFlow repository and all dependencies.
 #
 # The cascade of load() statements and tf_workspace?() calls works around the
diff --git a/tensorflow/BUILD b/tensorflow/BUILD
index 202553cd531..ff6a44a632c 100644
--- a/tensorflow/BUILD
+++ b/tensorflow/BUILD
@@ -1717,8 +1717,6 @@ py_library(
         "//tensorflow/lite/python:lite",
         "//tensorflow/lite/python/authoring",
         "//tensorflow/python:no_contrib",
-        "@pypi_keras//:pkg",
-        "@pypi_tensorboard//:pkg",
     ],
 )
 # copybara:comment_end
diff --git a/tensorflow/compiler/tf2tensorrt/BUILD b/tensorflow/compiler/tf2tensorrt/BUILD
index 68ca3881204..fed7643039d 100644
--- a/tensorflow/compiler/tf2tensorrt/BUILD
+++ b/tensorflow/compiler/tf2tensorrt/BUILD
@@ -1040,6 +1040,7 @@ pybind_extension(
         "@llvm_zlib//:__subpackages__",
         "@local_config_cuda//:__subpackages__",
         "@local_config_git//:__subpackages__",
+        "@local_config_python//:__subpackages__",
         "@local_config_rocm//:__subpackages__",
         "@local_config_tensorrt//:__subpackages__",
         "@local_execution_config_platform//:__subpackages__",
diff --git a/tensorflow/dtensor/python/tests/BUILD b/tensorflow/dtensor/python/tests/BUILD
index 615baad3085..9b6c5839b03 100644
--- a/tensorflow/dtensor/python/tests/BUILD
+++ b/tensorflow/dtensor/python/tests/BUILD
@@ -303,7 +303,6 @@ pytype_strict_library(
         ":test_util",
         "//tensorflow/python/platform:client_testlib",
         "@absl_py//absl/flags",
-        "@pypi_portpicker//:pkg",
     ],
 )
 
diff --git a/tensorflow/lite/python/BUILD b/tensorflow/lite/python/BUILD
index cf03dad0ee0..8b771ac20ae 100644
--- a/tensorflow/lite/python/BUILD
+++ b/tensorflow/lite/python/BUILD
@@ -266,7 +266,6 @@ py_test(
         "//tensorflow/python/framework:test_lib",
         "//tensorflow/python/platform:client_testlib",
         "//tensorflow/python/platform:resource_loader",
-        "@pypi_jax//:pkg",
     ],
 )
 
diff --git a/tensorflow/python/BUILD b/tensorflow/python/BUILD
index c1b7eb7c0ea..4093f4c5c09 100644
--- a/tensorflow/python/BUILD
+++ b/tensorflow/python/BUILD
@@ -550,7 +550,6 @@ py_strict_library(
     deps = [
         ":keras_lib",
         "//third_party/py/numpy",
-        "@pypi_scipy//:pkg",
         "@six_archive//:six",
     ],
 )
diff --git a/tensorflow/python/compiler/tensorrt/BUILD b/tensorflow/python/compiler/tensorrt/BUILD
index f3fd845ff53..78a45f4ed25 100644
--- a/tensorflow/python/compiler/tensorrt/BUILD
+++ b/tensorflow/python/compiler/tensorrt/BUILD
@@ -69,7 +69,6 @@ py_strict_library(
         "//tensorflow/python/util:nest",
         "//tensorflow/python/util:tf_export",
         "//third_party/py/numpy",
-        "@pypi_packaging//:pkg",
         "@six_archive//:six",
     ],
 )
diff --git a/tensorflow/python/data/experimental/kernel_tests/service/BUILD b/tensorflow/python/data/experimental/kernel_tests/service/BUILD
index 8d36d2e3637..2b8a8fd3654 100644
--- a/tensorflow/python/data/experimental/kernel_tests/service/BUILD
+++ b/tensorflow/python/data/experimental/kernel_tests/service/BUILD
@@ -143,7 +143,6 @@ tf_py_strict_test(
         "//tensorflow/python/ops:array_ops",
         "//tensorflow/python/platform:client_testlib",
         "@absl_py//absl/testing:parameterized",
-        "@pypi_portpicker//:pkg",
     ],
 )
 
diff --git a/tensorflow/python/debug/lib/BUILD b/tensorflow/python/debug/lib/BUILD
index 37c99b30dd2..012e349dffc 100644
--- a/tensorflow/python/debug/lib/BUILD
+++ b/tensorflow/python/debug/lib/BUILD
@@ -596,7 +596,6 @@ py_strict_library(
         "//tensorflow/python/lib/io:lib",
         "//tensorflow/python/ops:variables",
         "//tensorflow/python/util:compat",
-        "@pypi_portpicker//:pkg",
     ],
 )
 
diff --git a/tensorflow/python/distribute/experimental/rpc/BUILD b/tensorflow/python/distribute/experimental/rpc/BUILD
index 94855205c70..3b3e3f9aee3 100644
--- a/tensorflow/python/distribute/experimental/rpc/BUILD
+++ b/tensorflow/python/distribute/experimental/rpc/BUILD
@@ -60,6 +60,5 @@ tf_py_strict_test(
         "//tensorflow/python/ops:variables",
         "//tensorflow/python/platform:client_testlib",
         "//tensorflow/python/util:nest",
-        "@pypi_portpicker//:pkg",
     ],
 )
diff --git a/tensorflow/python/distribute/failure_handling/BUILD b/tensorflow/python/distribute/failure_handling/BUILD
index 77317019fee..df52d80552e 100644
--- a/tensorflow/python/distribute/failure_handling/BUILD
+++ b/tensorflow/python/distribute/failure_handling/BUILD
@@ -47,7 +47,6 @@ py_strict_library(
     deps = [
         "//tensorflow/python/eager:context",
         "//tensorflow/python/platform:tf_logging",
-        "@pypi_requests//:pkg",
         "@six_archive//:six",
     ],
 )
diff --git a/tensorflow/python/eager/BUILD b/tensorflow/python/eager/BUILD
index b7bc8350e13..dc5e0ae232f 100644
--- a/tensorflow/python/eager/BUILD
+++ b/tensorflow/python/eager/BUILD
@@ -1167,7 +1167,6 @@ cuda_py_strict_test(
         "//tensorflow/python/training:server_lib",
         "//tensorflow/python/util:compat",
         "@absl_py//absl/testing:parameterized",
-        "@pypi_portpicker//:pkg",
     ],
 )
 
diff --git a/tensorflow/python/estimator/BUILD b/tensorflow/python/estimator/BUILD
index 73a7c2626bb..1feef12df67 100644
--- a/tensorflow/python/estimator/BUILD
+++ b/tensorflow/python/estimator/BUILD
@@ -380,7 +380,11 @@ py_library(
     ],
 )
 
-alias(
-    name = "expect_tensorflow_estimator_installed",
-    actual = "@pypi_tensorflow_estimator//:pkg",
+py_library(
+     name = "expect_tensorflow_estimator_installed",
+    srcs_version = "PY3",
+    # This is a dummy rule used as a dependency in open-source.
+    # We expect tensorflow_estimator to already be installed.
+    visibility = ["//visibility:public"],
 )
+
diff --git a/tensorflow/python/framework/BUILD b/tensorflow/python/framework/BUILD
index d8ce1f5c0bf..1100c23b562 100644
--- a/tensorflow/python/framework/BUILD
+++ b/tensorflow/python/framework/BUILD
@@ -359,7 +359,6 @@ py_strict_library(
         "//tensorflow/python/util:deprecation",
         "//tensorflow/python/util:tf_export",
         "//third_party/py/numpy",
-        "@pypi_packaging//:pkg",
     ] + if_xla_available([
         "//tensorflow/python:_pywrap_tfcompile",
     ]),
@@ -2036,7 +2035,6 @@ py_strict_library(
         "//tensorflow/python/util/protobuf",
         "//third_party/py/numpy",
         "@absl_py//absl/testing:parameterized",
-        "@pypi_portpicker//:pkg",
     ],
 )
 
diff --git a/tensorflow/python/keras/BUILD b/tensorflow/python/keras/BUILD
index c271a5ef77a..d516853a13e 100755
--- a/tensorflow/python/keras/BUILD
+++ b/tensorflow/python/keras/BUILD
@@ -42,7 +42,6 @@ py_library(
         "//tensorflow/python/saved_model",
         "//tensorflow/python/training",
         "//tensorflow/python/util:nest",
-        "@pypi_h5py//:pkg",
     ],
 )
 
diff --git a/tensorflow/python/keras/engine/BUILD b/tensorflow/python/keras/engine/BUILD
index 2098b1650bc..287b1a4aa91 100644
--- a/tensorflow/python/keras/engine/BUILD
+++ b/tensorflow/python/keras/engine/BUILD
@@ -93,7 +93,6 @@ py_library(
         "//tensorflow/python/util:tf_decorator",
         "//tensorflow/python/util:tf_export",
         "//tensorflow/tools/docs:doc_controls",
-        "@pypi_h5py//:pkg",
     ],
 )
 
diff --git a/tensorflow/python/keras/saving/BUILD b/tensorflow/python/keras/saving/BUILD
index d7cb2ccb2fc..b40d979c82d 100644
--- a/tensorflow/python/keras/saving/BUILD
+++ b/tensorflow/python/keras/saving/BUILD
@@ -53,6 +53,5 @@ py_library(
         "//tensorflow/python/platform:tf_logging",
         "//tensorflow/python/saved_model",
         "//tensorflow/python/training:saver",
-        "@pypi_h5py//:pkg",
     ],
 )
diff --git a/tensorflow/python/profiler/BUILD b/tensorflow/python/profiler/BUILD
index b1cfd6ea10c..9413aeeab8b 100644
--- a/tensorflow/python/profiler/BUILD
+++ b/tensorflow/python/profiler/BUILD
@@ -43,7 +43,6 @@ cuda_py_strict_test(
         "//tensorflow/python/eager:test",
         "//tensorflow/python/framework:errors",
         "//tensorflow/python/framework:test_lib",
-        "@pypi_portpicker//:pkg",
     ],
 )
 
diff --git a/tensorflow/python/profiler/integration_test/BUILD b/tensorflow/python/profiler/integration_test/BUILD
index b20698ea6ea..e7060e5a315 100644
--- a/tensorflow/python/profiler/integration_test/BUILD
+++ b/tensorflow/python/profiler/integration_test/BUILD
@@ -35,6 +35,5 @@ cuda_py_strict_test(
         "//tensorflow/python/platform:tf_logging",
         "//tensorflow/python/profiler:profiler_client",
         "//tensorflow/python/profiler:profiler_v2",
-        "@pypi_portpicker//:pkg",
     ],
 )
diff --git a/tensorflow/python/summary/BUILD b/tensorflow/python/summary/BUILD
index 126fb6d31f7..b292e39356f 100644
--- a/tensorflow/python/summary/BUILD
+++ b/tensorflow/python/summary/BUILD
@@ -121,6 +121,5 @@ tf_py_strict_test(
         "//tensorflow/python/ops:summary_ops_v2",
         "//tensorflow/python/platform:client_testlib",
         "//tensorflow/python/training:training_util",
-        "@pypi_tensorboard//:pkg",
     ],
 )
diff --git a/tensorflow/tools/pip_package/build_pip_package.sh b/tensorflow/tools/pip_package/build_pip_package.sh
index 4d9853c7871..181a8526d9b 100755
--- a/tensorflow/tools/pip_package/build_pip_package.sh
+++ b/tensorflow/tools/pip_package/build_pip_package.sh
@@ -16,6 +16,7 @@
 
 
 set -e
+set -x
 
 # Read the value of VERSION from vercod.bzl
 VERSION=$(grep 'VERSION = ' tensorflow/tensorflow.bzl | sed -E 's/VERSION = "(.*)"/\1/g')
@@ -47,22 +48,6 @@ function cp_external() {
   cp "${src_dir}/local_config_cuda/cuda/cuda/cuda_config.h" "${dest_dir}/local_config_cuda/cuda/cuda/"
 }
 
-function cp_local_config_python() {
-  local src_dir=$1
-  local dest_dir=$2
-  pushd .
-  cd "$src_dir"
-  mkdir -p "${dest_dir}/local_config_python/numpy_include/"
-  cp -r "pypi_numpy/site-packages/numpy/core/include/numpy" "${dest_dir}/local_config_python/numpy_include/"
-  mkdir -p "${dest_dir}/local_config_python/python_include/"
-  if is_windows; then
-    cp -r python_*/include/* "${dest_dir}/local_config_python/python_include/"
-  else
-    cp -r python_*/include/python*/* "${dest_dir}/local_config_python/python_include/"
-  fi
-  popd
-}
-
 function copy_xla_aot_runtime_sources() {
   local src_dir=$1
   local dst_dir=$2
@@ -174,9 +159,6 @@ function prepare_src() {
     cp_external \
       bazel-bin/tensorflow/tools/pip_package/build_pip_package.exe.runfiles \
       "${EXTERNAL_INCLUDES}/"
-    cp_local_config_python \
-      bazel-bin/tensorflow/tools/pip_package/build_pip_package.exe.runfiles \
-      "${EXTERNAL_INCLUDES}/"
     copy_xla_aot_runtime_sources \
       bazel-bin/tensorflow/tools/pip_package/build_pip_package.exe.runfiles/org_tensorflow \
       "${XLA_AOT_RUNTIME_SOURCES}/"
@@ -220,17 +202,11 @@ function prepare_src() {
       cp_external \
         bazel-bin/tensorflow/tools/pip_package/build_pip_package.runfiles/org_tensorflow/external \
         "${EXTERNAL_INCLUDES}"
-      cp_local_config_python \
-        bazel-bin/tensorflow/tools/pip_package/build_pip_package.runfiles/org_tensorflow/external \
-        "${EXTERNAL_INCLUDES}"
     else
       # New-style runfiles structure (--nolegacy_external_runfiles).
       cp_external \
         bazel-bin/tensorflow/tools/pip_package/build_pip_package.runfiles \
         "${EXTERNAL_INCLUDES}"
-      cp_local_config_python \
-        bazel-bin/tensorflow/tools/pip_package/build_pip_package.runfiles \
-        "${EXTERNAL_INCLUDES}"
     fi
     copy_xla_aot_runtime_sources \
       bazel-bin/tensorflow/tools/pip_package/build_pip_package.runfiles/org_tensorflow \
@@ -321,8 +297,7 @@ function build_wheel() {
     export PYTHONPATH="$PYTHONPATH:$PWD/bazel-tensorflow/external/pypi_wheel/site-packages/"
   else
     PY_DIR=$(find ./bazel-bin/tensorflow/tools/pip_package/build_pip_package.runfiles/ -maxdepth 1 -type d -name "python_*")
-    FULL_DIR="$(real_path "$PY_DIR")/bin/python3"
-    export PYTHONPATH="$PYTHONPATH:$PWD/bazel-bin/tensorflow/tools/pip_package/build_pip_package.runfiles/pypi_wheel/site-packages/"
+    FULL_DIR="${PYTHON_BIN_PATH}"
   fi
   
   pushd ${TMPDIR} > /dev/null
diff --git a/third_party/py/BUILD.tpl b/third_party/py/BUILD.tpl
index 7cc1e085684..45480bd4a31 100644
--- a/third_party/py/BUILD.tpl
+++ b/third_party/py/BUILD.tpl
@@ -5,17 +5,16 @@ package(default_visibility = ["//visibility:public"])
 # Point both runtimes to the same python binary to ensure we always
 # use the python binary specified by ./configure.py script.
 load("@bazel_tools//tools/python:toolchain.bzl", "py_runtime_pair")
-load("@python//:defs.bzl", "interpreter")
 
 py_runtime(
     name = "py2_runtime",
-    interpreter_path = interpreter,
+    interpreter_path = "%{PYTHON_BIN_PATH}",
     python_version = "PY2",
 )
 
 py_runtime(
     name = "py3_runtime",
-    interpreter_path = interpreter,
+    interpreter_path = "%{PYTHON_BIN_PATH}",
     python_version = "PY3",
 )
 
@@ -33,8 +32,27 @@ toolchain(
     exec_compatible_with = [%{PLATFORM_CONSTRAINT}],
 )
 
-alias(name = "python_headers",
-      actual = "@python//:python_headers")
+# To build Python C/C++ extension on Windows, we need to link to python import library pythonXY.lib
+# See https://docs.python.org/3/extending/windows.html
+cc_import(
+    name = "python_lib",
+    interface_library = select({
+        ":windows": ":python_import_lib",
+        # A placeholder for Unix platforms which makes --no_build happy.
+        "//conditions:default": "not-existing.lib",
+    }),
+    system_provided = 1,
+)
+
+cc_library(
+    name = "python_headers",
+    hdrs = [":python_include"],
+    deps = select({
+        ":windows": [":python_lib"],
+        "//conditions:default": [],
+    }),
+    includes = ["python_include"],
+)
 
 # This alias is exists for the use of targets in the @llvm-project dependency,
 # which expect a python_headers target called @python_runtime//:headers. We use
@@ -45,9 +63,18 @@ alias(
     actual = ":python_headers",
 )
 
+cc_library(
+    name = "numpy_headers",
+    hdrs = [":numpy_include"],
+    includes = ["numpy_include"],
+)
 
 config_setting(
     name = "windows",
     values = {"cpu": "x64_windows"},
     visibility = ["//visibility:public"],
-)
\ No newline at end of file
+)
+
+%{PYTHON_INCLUDE_GENRULE}
+%{NUMPY_INCLUDE_GENRULE}
+%{PYTHON_IMPORT_LIB_GENRULE}
\ No newline at end of file
diff --git a/third_party/py/README b/third_party/py/README
new file mode 100644
index 00000000000..62188a5817a
--- /dev/null
+++ b/third_party/py/README
@@ -0,0 +1,3 @@
+This is a temporary copy of python_configure repository rule. It allows
+XLA and TSL to keep non-hermetic Python while TF uses hermetic Python.
+DO NOT DEPEND ON THIS COPY as it will be deleted soon.
\ No newline at end of file
diff --git a/third_party/py/numpy/BUILD b/third_party/py/numpy/BUILD
index 97c7907fc38..c80cc5287bc 100644
--- a/third_party/py/numpy/BUILD
+++ b/third_party/py/numpy/BUILD
@@ -2,14 +2,15 @@ licenses(["restricted"])
 
 package(default_visibility = ["//visibility:public"])
 
-alias(
+py_library(
     name = "numpy",
-    actual = "@pypi_numpy//:pkg",
+    srcs = ["tf_numpy_dummy.py"],
+    srcs_version = "PY3",
 )
 
 alias(
     name = "headers",
-    actual = "@pypi_numpy//:numpy_headers",
+    actual = "@local_config_python//:numpy_headers",
 )
 
 genrule(
diff --git a/third_party/py/numpy/tf_numpy_api/tensorflow.experimental.numpy.pbtxt b/third_party/py/numpy/tf_numpy_api/tensorflow.experimental.numpy.pbtxt
index 05939b53b5f..2f5490ad0c9 100644
--- a/third_party/py/numpy/tf_numpy_api/tensorflow.experimental.numpy.pbtxt
+++ b/third_party/py/numpy/tf_numpy_api/tensorflow.experimental.numpy.pbtxt
@@ -390,7 +390,7 @@ tf_module {
   }
   member_method {
     name: "experimental_enable_numpy_behavior"
-    argspec: "args=[\'prefer_float32\', \'dtype_conversion_mode\'], varargs=None, keywords=None, defaults=[\'False\', \'legacy\'], "
+    argspec: "args=[\'prefer_float32\'], varargs=None, keywords=None, defaults=[\'False\'], "
   }
   member_method {
     name: "expm1"
diff --git a/third_party/py/python_configure.bzl b/third_party/py/python_configure.bzl
index 3728a91b931..e57af9f9dc9 100644
--- a/third_party/py/python_configure.bzl
+++ b/third_party/py/python_configure.bzl
@@ -1,4 +1,9 @@
 """Repository rule for Python autoconfiguration.
+
+`python_configure` depends on the following environment variables:
+
+  * `PYTHON_BIN_PATH`: location of python binary.
+  * `PYTHON_LIB_PATH`: Location of python libraries.
 """
 
 load(
@@ -6,8 +11,178 @@ load(
     "BAZEL_SH",
     "PYTHON_BIN_PATH",
     "PYTHON_LIB_PATH",
+    "TF_PYTHON_CONFIG_REPO",
+    "auto_config_fail",
+    "config_repo_label",
+    "execute",
+    "get_bash_bin",
+    "get_host_environ",
+    "get_python_bin",
+    "is_windows",
+    "raw_exec",
+    "read_dir",
 )
 
+def _genrule(src_dir, genrule_name, command, outs):
+    """Returns a string with a genrule.
+
+    Genrule executes the given command and produces the given outputs.
+    """
+    return (
+        "genrule(\n" +
+        '    name = "' +
+        genrule_name + '",\n' +
+        "    outs = [\n" +
+        outs +
+        "\n    ],\n" +
+        '    cmd = """\n' +
+        command +
+        '\n   """,\n' +
+        ")\n"
+    )
+
+def _norm_path(path):
+    """Returns a path with '/' and remove the trailing slash."""
+    path = path.replace("\\", "/")
+    if path[-1] == "/":
+        path = path[:-1]
+    return path
+
+def _symlink_genrule_for_dir(
+        repository_ctx,
+        src_dir,
+        dest_dir,
+        genrule_name,
+        src_files = [],
+        dest_files = []):
+    """Returns a genrule to symlink(or copy if on Windows) a set of files.
+
+    If src_dir is passed, files will be read from the given directory; otherwise
+    we assume files are in src_files and dest_files
+    """
+    if src_dir != None:
+        src_dir = _norm_path(src_dir)
+        dest_dir = _norm_path(dest_dir)
+        files = "\n".join(read_dir(repository_ctx, src_dir))
+
+        # Create a list with the src_dir stripped to use for outputs.
+        dest_files = files.replace(src_dir, "").splitlines()
+        src_files = files.splitlines()
+    command = []
+    outs = []
+    for i in range(len(dest_files)):
+        if dest_files[i] != "":
+            # If we have only one file to link we do not want to use the dest_dir, as
+            # $(@D) will include the full path to the file.
+            dest = "$(@D)/" + dest_dir + dest_files[i] if len(dest_files) != 1 else "$(@D)/" + dest_files[i]
+
+            # Copy the headers to create a sandboxable setup.
+            cmd = "cp -f"
+            command.append(cmd + ' "%s" "%s"' % (src_files[i], dest))
+            outs.append('        "' + dest_dir + dest_files[i] + '",')
+    genrule = _genrule(
+        src_dir,
+        genrule_name,
+        " && ".join(command),
+        "\n".join(outs),
+    )
+    return genrule
+
+def _get_python_lib(repository_ctx, python_bin):
+    """Gets the python lib path."""
+    python_lib = get_host_environ(repository_ctx, PYTHON_LIB_PATH)
+    if python_lib != None:
+        return python_lib
+
+    # The interesting program to execute.
+    print_lib = [
+        "from __future__ import print_function",
+        "import site",
+        "import os",
+        "python_paths = []",
+        "if os.getenv('PYTHONPATH') is not None:",
+        "  python_paths = os.getenv('PYTHONPATH').split(':')",
+        "try:",
+        "  library_paths = site.getsitepackages()",
+        "except AttributeError:",
+        "  from distutils.sysconfig import get_python_lib",
+        "  library_paths = [get_python_lib()]",
+        "all_paths = set(python_paths + library_paths)",
+        "paths = []",
+        "for path in all_paths:",
+        "  if os.path.isdir(path):",
+        "    paths.append(path)",
+        "if len(paths) >=1:",
+        "  print(paths[0])",
+    ]
+
+    # The below script writes the above program to a file
+    # and executes it. This is to work around the limitation
+    # of not being able to upload files as part of execute.
+    cmd = "from os import linesep;"
+    cmd += "f = open('script.py', 'w');"
+    for line in print_lib:
+        cmd += "f.write(\"%s\" + linesep);" % line
+    cmd += "f.close();"
+    cmd += "from subprocess import call;"
+    cmd += "call([\"%s\", \"script.py\"]);" % python_bin
+
+    result = execute(repository_ctx, [python_bin, "-c", cmd])
+    return result.stdout.strip()
+
+def _check_python_lib(repository_ctx, python_lib):
+    """Checks the python lib path."""
+    cmd = 'test -d "%s" -a -x "%s"' % (python_lib, python_lib)
+    result = raw_exec(repository_ctx, [get_bash_bin(repository_ctx), "-c", cmd])
+    if result.return_code == 1:
+        auto_config_fail("Invalid python library path: %s" % python_lib)
+
+def _check_python_bin(repository_ctx, python_bin):
+    """Checks the python bin path."""
+    cmd = '[[ -x "%s" ]] && [[ ! -d "%s" ]]' % (python_bin, python_bin)
+    result = raw_exec(repository_ctx, [get_bash_bin(repository_ctx), "-c", cmd])
+    if result.return_code == 1:
+        auto_config_fail("--define %s='%s' is not executable. Is it the python binary?" % (
+            PYTHON_BIN_PATH,
+            python_bin,
+        ))
+
+def _get_python_include(repository_ctx, python_bin):
+    """Gets the python include path."""
+    return repository_ctx.os.environ["CROSSTOOL_PYTHON_INCLUDE_PATH"]
+
+def _get_python_import_lib_name(repository_ctx, python_bin):
+    """Get Python import library name (pythonXY.lib) on Windows."""
+    result = execute(
+        repository_ctx,
+        [
+            python_bin,
+            "-c",
+            "import sys;" +
+            'print("python" + str(sys.version_info[0]) + ' +
+            '      str(sys.version_info[1]) + ".lib")',
+        ],
+        error_msg = "Problem getting python import library.",
+        error_details = ("Is the Python binary path set up right? " +
+                         "(See ./configure or " + PYTHON_BIN_PATH + ".) "),
+    )
+    return result.stdout.splitlines()[0]
+
+def _get_numpy_include(repository_ctx, python_bin):
+    """Gets the numpy include path."""
+    return execute(
+        repository_ctx,
+        [
+            python_bin,
+            "-c",
+            "from __future__ import print_function;" +
+            "import numpy;" +
+            " print(numpy.get_include());",
+        ],
+        error_msg = "Problem getting numpy include path.",
+        error_details = "Is numpy installed?",
+    ).stdout.splitlines()[0]
+
 def _create_local_python_repository(repository_ctx):
     """Creates the repository containing files set up to build with Python."""
 
@@ -15,14 +190,68 @@ def _create_local_python_repository(repository_ctx):
     # function to be restarted with all previous state being lost. This
     # can easily lead to a O(n^2) runtime in the number of labels.
     build_tpl = repository_ctx.path(Label("//third_party/py:BUILD.tpl"))
+
+    python_bin = get_python_bin(repository_ctx)
+    _check_python_bin(repository_ctx, python_bin)
+    python_lib = _get_python_lib(repository_ctx, python_bin)
+    _check_python_lib(repository_ctx, python_lib)
+    python_include = _get_python_include(repository_ctx, python_bin)
+    numpy_include = _get_numpy_include(repository_ctx, python_bin) + "/numpy"
+    python_include_rule = _symlink_genrule_for_dir(
+        repository_ctx,
+        python_include,
+        "python_include",
+        "python_include",
+    )
+    python_import_lib_genrule = ""
+
+    # To build Python C/C++ extension on Windows, we need to link to python import library pythonXY.lib
+    # See https://docs.python.org/3/extending/windows.html
+    if is_windows(repository_ctx):
+        python_bin = python_bin.replace("\\", "/")
+        python_include = _norm_path(python_include)
+        python_import_lib_name = _get_python_import_lib_name(repository_ctx, python_bin)
+        python_import_lib_src = python_include.rsplit("/", 1)[0] + "/libs/" + python_import_lib_name
+        python_import_lib_genrule = _symlink_genrule_for_dir(
+            repository_ctx,
+            None,
+            "",
+            "python_import_lib",
+            [python_import_lib_src],
+            [python_import_lib_name],
+        )
+    numpy_include_rule = _symlink_genrule_for_dir(
+        repository_ctx,
+        numpy_include,
+        "numpy_include/numpy",
+        "numpy_include",
+    )
+
     platform_constraint = ""
     if repository_ctx.attr.platform_constraint:
         platform_constraint = "\"%s\"" % repository_ctx.attr.platform_constraint
-    repository_ctx.template("BUILD", build_tpl, {"%{PLATFORM_CONSTRAINT}": platform_constraint})
+    repository_ctx.template("BUILD", build_tpl, {
+        "%{PYTHON_BIN_PATH}": python_bin,
+        "%{PYTHON_INCLUDE_GENRULE}": python_include_rule,
+        "%{PYTHON_IMPORT_LIB_GENRULE}": python_import_lib_genrule,
+        "%{NUMPY_INCLUDE_GENRULE}": numpy_include_rule,
+        "%{PLATFORM_CONSTRAINT}": platform_constraint,
+    })
+
+def _create_remote_python_repository(repository_ctx, remote_config_repo):
+    """Creates pointers to a remotely configured repo set up to build with Python.
+    """
+    repository_ctx.template("BUILD", config_repo_label(remote_config_repo, ":BUILD"), {})
 
 def _python_autoconf_impl(repository_ctx):
     """Implementation of the python_autoconf repository rule."""
-    _create_local_python_repository(repository_ctx)
+    if get_host_environ(repository_ctx, TF_PYTHON_CONFIG_REPO) != None:
+        _create_remote_python_repository(
+            repository_ctx,
+            get_host_environ(repository_ctx, TF_PYTHON_CONFIG_REPO),
+        )
+    else:
+        _create_local_python_repository(repository_ctx)
 
 _ENVIRONS = [
     BAZEL_SH,
@@ -32,6 +261,7 @@ _ENVIRONS = [
 
 local_python_configure = repository_rule(
     implementation = _create_local_python_repository,
+    environ = _ENVIRONS,
     attrs = {
         "environ": attr.string_dict(),
         "platform_constraint": attr.string(),
@@ -50,6 +280,7 @@ remote_python_configure = repository_rule(
 
 python_configure = repository_rule(
     implementation = _python_autoconf_impl,
+    environ = _ENVIRONS + [TF_PYTHON_CONFIG_REPO],
     attrs = {
         "platform_constraint": attr.string(),
     },
-- 
2.27.0

